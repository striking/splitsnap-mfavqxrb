name: Generate Venture Application

on:
  workflow_dispatch:
  push:
    paths:
      - 'venture.json'
    branches:
      - main

jobs:
  generate:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Read venture configuration
        id: venture
        run: |
          echo "config<<EOF" >> $GITHUB_OUTPUT
          cat venture.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Install base dependencies
        run: |
          npm init -y
          npm install next@latest react@latest react-dom@latest
          npm install -D typescript @types/react @types/node tailwindcss postcss autoprefixer
          npm install @vercel/analytics lucide-react clsx tailwind-merge
          
      - name: Generate application structure
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Create Next.js app structure
          mkdir -p src/app
          mkdir -p src/components
          mkdir -p src/lib
          mkdir -p public
          
          # Generate TypeScript config
          cat > tsconfig.json << 'EOF'
          {
            "compilerOptions": {
              "target": "es5",
              "lib": ["dom", "dom.iterable", "esnext"],
              "allowJs": true,
              "skipLibCheck": true,
              "strict": true,
              "noEmit": true,
              "esModuleInterop": true,
              "module": "esnext",
              "moduleResolution": "bundler",
              "resolveJsonModule": true,
              "isolatedModules": true,
              "jsx": "preserve",
              "incremental": true,
              "plugins": [
                {
                  "name": "next"
                }
              ],
              "paths": {
                "@/*": ["./src/*"]
              }
            },
            "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
            "exclude": ["node_modules"]
          }
          EOF
          
          # Generate Tailwind config
          cat > tailwind.config.ts << 'EOF'
          import type { Config } from 'tailwindcss'
          
          const config: Config = {
            content: [
              './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
              './src/components/**/*.{js,ts,jsx,tsx,mdx}',
              './src/app/**/*.{js,ts,jsx,tsx,mdx}',
            ],
            theme: {
              extend: {},
            },
            plugins: [],
          }
          export default config
          EOF
          
          # Generate PostCSS config
          cat > postcss.config.js << 'EOF'
          module.exports = {
            plugins: {
              tailwindcss: {},
              autoprefixer: {},
            },
          }
          EOF
          
      - name: Generate application code
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Create globals.css
          cat > src/app/globals.css << 'EOF'
          @tailwind base;
          @tailwind components;
          @tailwind utilities;
          EOF
          
          # Create layout.tsx
          cat > src/app/layout.tsx << 'EOF'
          import type { Metadata } from 'next'
          import { Inter } from 'next/font/google'
          import './globals.css'
          
          const inter = Inter({ subsets: ['latin'] })
          
          export const metadata: Metadata = {
            title: 'SplitSnap',
            description: 'Take a photo of any receipt or type an expense, instantly see who owes what, and share a link to settle up - no signup required',
          }
          
          export default function RootLayout({
            children,
          }: {
            children: React.ReactNode
          }) {
            return (
              <html lang="en">
                <body className={inter.className}>{children}</body>
              </html>
            )
          }
          EOF
          
          # Create homepage
          cat > src/app/page.tsx << 'EOF'
          export default function Home() {
            return (
              <main className="min-h-screen p-8">
                <div className="max-w-6xl mx-auto">
                  <h1 className="text-4xl font-bold mb-4">SplitSnap</h1>
                  <p className="text-xl text-gray-600 mb-8">Take a photo of any receipt or type an expense, instantly see who owes what, and share a link to settle up - no signup required</p>
                  
                  <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                    
                    <div className="p-6 bg-white rounded-lg shadow-md">
                      <h3 className="text-lg font-semibold mb-2">Quick expense entry: Snap a receipt photo or type amount + description</h3>
                      <p className="text-gray-600">Feature implementation coming soon</p>
                    </div>
                    
                    <div className="p-6 bg-white rounded-lg shadow-md">
                      <h3 className="text-lg font-semibold mb-2">Instant split calculator: Add names, auto-splits evenly or custom percentages</h3>
                      <p className="text-gray-600">Feature implementation coming soon</p>
                    </div>
                    
                    <div className="p-6 bg-white rounded-lg shadow-md">
                      <h3 className="text-lg font-semibold mb-2">Share via link: Copy a unique URL that shows who owes what - works without app</h3>
                      <p className="text-gray-600">Feature implementation coming soon</p>
                    </div>
                    
                    <div className="p-6 bg-white rounded-lg shadow-md">
                      <h3 className="text-lg font-semibold mb-2">Running balance: See all unsettled expenses and net amounts owed between people</h3>
                      <p className="text-gray-600">Feature implementation coming soon</p>
                    </div>
                    
                    <div className="p-6 bg-white rounded-lg shadow-md">
                      <h3 className="text-lg font-semibold mb-2">One-tap feedback: 'Did this save you time?' prompt after settling up</h3>
                      <p className="text-gray-600">Feature implementation coming soon</p>
                    </div>
                    
                  </div>
                  
                  <div className="mt-12 p-6 bg-blue-50 rounded-lg">
                    <h2 className="text-2xl font-bold mb-4">Tech Stack</h2>
                    <div className="flex flex-wrap gap-2">
                      
                      <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                        Next.js
                      </span>
                      
                      <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                        TypeScript
                      </span>
                      
                      <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                        Tailwind CSS
                      </span>
                      
                      <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">
                        Supabase
                      </span>
                      
                    </div>
                  </div>
                </div>
              </main>
            )
          }
          EOF
          
      - name: Generate advanced features with Claude
        if: ${{ secrets.ANTHROPIC_API_KEY != '' }}
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # This step would use Claude API to generate more sophisticated code
          # For now, we'll create a simple API route as an example
          
          mkdir -p src/app/api/health
          cat > src/app/api/health/route.ts << 'EOF'
          import { NextResponse } from 'next/server'
          
          export async function GET() {
            return NextResponse.json({
              status: 'healthy',
              venture: 'splitsnap-mfavqxrb',
              timestamp: new Date().toISOString()
            })
          }
          EOF
          
      - name: Update package.json scripts
        run: |
          npm pkg set scripts.dev="next dev"
          npm pkg set scripts.build="next build"
          npm pkg set scripts.start="next start"
          npm pkg set scripts.lint="next lint"
          
      - name: Create Vercel configuration
        run: |
          cat > vercel.json << 'EOF'
          {
            "framework": "nextjs",
            "buildCommand": "npm run build",
            "devCommand": "npm run dev",
            "installCommand": "npm install",
            "outputDirectory": ".next"
          }
          EOF
          
      - name: Commit generated code
        run: |
          git config --local user.email "atlas-ai[bot]@users.noreply.github.com"
          git config --local user.name "Atlas AI Bot"
          git add .
          git commit -m "ðŸš€ Generate SplitSnap application
          
          - Created Next.js application structure
          - Added Tailwind CSS configuration
          - Generated homepage with features
          - Set up TypeScript
          - Added Vercel deployment config
          
          Features:
          - Quick expense entry: Snap a receipt photo or type amount + description\n- Instant split calculator: Add names, auto-splits evenly or custom percentages\n- Share via link: Copy a unique URL that shows who owes what - works without app\n- Running balance: See all unsettled expenses and net amounts owed between people\n- One-tap feedback: 'Did this save you time?' prompt after settling up
          
          Tech Stack: Next.js, TypeScript, Tailwind CSS, Supabase
          " || echo "No changes to commit"
          
      - name: Push changes
        run: |
          git push origin main
          
      - name: Update venture status
        if: success()
        run: |
          echo "âœ… Venture generation completed successfully"
          # This would call back to Atlas AI to update the venture status
          
      - name: Trigger Vercel deployment
        if: success()
        run: |
          echo "ðŸš€ Vercel will automatically deploy from this push"
